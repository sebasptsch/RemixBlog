// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String?
  accounts  Provider[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  role      Role       @default(USER)
  posts     Post[]
  comments  Comment[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

enum AccountType {
  DISCORD
  GITHUB
}

model Provider {
  id        Int         @id @default(autoincrement())
  uid       String
  provider  AccountType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@unique([uid, provider])
  @@map("providers")
}

model Post {
  id          Int         @id @default(autoincrement())
  status      DraftStatus @default(DRAFT)
  slug        String      @unique
  title       String
  summary     String
  content     Json
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime    @default(now())
  publishedAt DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  comments    Comment[]

  tags PostTag[] @relation(name: "PostOnTag")

  @@map("posts")
}

model PostTag {
  postId Int
  post   Post @relation(fields: [postId], references: [id], name: "PostOnTag")

  tagLabel String
  tag      Tag    @relation(fields: [tagLabel], references: [label], name: "TagOnPost")

  @@id([postId, tagLabel])
}

model Tag {
  label String    @id
  posts PostTag[] @relation(name: "TagOnPost")

  @@map("tags")
}

enum DraftStatus {
  DRAFT
  PUBLISHED
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  Int?
  children  Comment[] @relation("CommentToComment")

  @@map("comments")
}
